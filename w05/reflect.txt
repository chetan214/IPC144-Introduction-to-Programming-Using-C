///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #5 (P2)
Full Name  : Chetan Arora
Student ID#: 100976240
Email      : carora18@myseneca.ca
Section    : ZRA

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

Question 1:- You learned several iteration constructs in the previous two weeks (do-while, while, for). In this workshop, you had to validate the rating values entered by the user. Can you use the “for” iteration construct to do that? Why?
Answer:-I used the "for" iteration construct to validate the rating values entered. The reason is that the for loop allows the code to iterate through a specified number of times (for (i = 0; i < LOG_DAYS; i++)) such as LOG_DAYS. Within each iteration,I used a do-while loop to validate the correct rating values. The do-while loop is running until the user enters a correct rating value.

Here is the code:

for (i = 0; i < LOG_DAYS; i++)
{
    switch (month)
    {
    case 1:printf("%d-JAN-%.2d\n", year, i + 1);
        break;
    case 2:printf("%d-FEB-%.2d\n", year, i + 1);
        break;
    case 3:printf("%d-MAR-%.2d\n", year, i + 1);
        break;
    case 4:printf("%d-APR-%.2d\n", year, i + 1);
        break;
    case 5:printf("%d-MAY-%.2d\n", year, i + 1);
        break;
    case 6:printf("%d-JUN-%.2d\n", year, i + 1);
        break;
    case 7:printf("%d-JUL-%.2d\n", year, i + 1);
        break;
    case 8:printf("%d-AUG-%.2d\n", year, i + 1);
        break;
    case 9:printf("%d-SEP-%.2d\n", year, i + 1);
        break;
    case 10:printf("%d-OCT-%.2d\n", year, i + 1);
        break;
    case 11:printf("%d-NOV-%.2d\n", year, i + 1);
        break;
    case 12:printf("%d-DEC-%.2d\n", year, i + 1);
        break;
    }
    do {
        printf("   Morning rating (0.0-5.0): ");
        scanf("%lf", &morningRating);
        if (morningRating < 0.0 || morningRating>5.0)
        {
            printf("      ERROR: Rating must be between 0.0 and 5.0 inclusive!\n");
        }
    } while (morningRating < 0.0 || morningRating>5.0);
    sumOfMorning = sumOfMorning + morningRating;
    do {
        printf("   Evening rating (0.0-5.0): ");
        scanf("%lf", &eveningRating);
        if (eveningRating < 0.0 || eveningRating>5.0)
        {
            printf("      ERROR: Rating must be between 0.0 and 5.0 inclusive!\n");
        }
    } while (eveningRating < 0.0 || eveningRating>5.0);
    sumOfEvening = sumOfEvening + eveningRating;
}


Question 2:- You can print the month in part 2 of this workshop using two different selection constructs; which one did you select? Why?
Answer:- In this workshop, the month is printed using switch statement. If I use if-else statements instead of switch that required to check each condition in the program until finds the correct one.The reason for this is that the switch statement is more efficient and readable in this case. The switch statement allows to directly jump to the appropriate value of the variable 'month'.
Here is the code:

 switch (month)
    {
    case 1:printf("%d-JAN-%.2d\n", year, i + 1);
        break;
    case 2:printf("%d-FEB-%.2d\n", year, i + 1);
        break;
    case 3:printf("%d-MAR-%.2d\n", year, i + 1);
        break;
    case 4:printf("%d-APR-%.2d\n", year, i + 1);
        break;
    case 5:printf("%d-MAY-%.2d\n", year, i + 1);
        break;
    case 6:printf("%d-JUN-%.2d\n", year, i + 1);
        break;
    case 7:printf("%d-JUL-%.2d\n", year, i + 1);
        break;
    case 8:printf("%d-AUG-%.2d\n", year, i + 1);
        break;
    case 9:printf("%d-SEP-%.2d\n", year, i + 1);
        break;
    case 10:printf("%d-OCT-%.2d\n", year, i + 1);
        break;
    case 11:printf("%d-NOV-%.2d\n", year, i + 1);
        break;
    case 12:printf("%d-DEC-%.2d\n", year, i + 1);
        break;
    }


Question 3:- Why do we try to use variables and macros to represent information rather than hardcode “magic” numbers (constant literals)? Using the details of this workshop, describe at least three advantages this provides us.
Answer:- Usage of variables and macros to represent information instead of hardcoding have several advantages such as readability, Maintainability and Flexibility
Readability: Using the LOG_DAYS macro and the variables makes it clearer what the values represent.

Maintainability: If the number of log days or years is changed,it is easy to update the code by modifying the LOG_DAYS, MIN_YEAR, and MAX_YEAR macros.For example, if the number of log days is changed from 3 to 10, it is much easier to modify the LOG_DAYS macro than to modify every instance of the number 3.

Flexibility: The program can be modified to allow the user to choose the number of log days or the allowed range of years by modifying the LOG_DAYS, MIN_YEAR, and MAX_YEAR macros.
